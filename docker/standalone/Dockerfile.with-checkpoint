FROM eclipse-temurin:21 as base

LABEL org.opencontainers.image.source=https://github.com/xtdb/xtdb
LABEL org.opencontainers.image.description="XTDB 2.x with fast startup checkpoint"
LABEL org.opencontainers.image.licenses="MPL-2.0"

LABEL usage="Example docker-run options for custom logging configuration: \
--volume .:/config --env JDK_JAVA_OPTIONS='-Dlogback.configurationFile=/config/logback.xml'"

# Install CRIU for checkpoint/restore functionality
RUN apt-get update && \
    apt-get install -y criu curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /usr/local/lib/xtdb

# Add application files
ADD local_config.yaml local_config.yaml
ADD build/libs/xtdb-standalone.jar xtdb-standalone.jar
ADD checkpoint-entrypoint.sh checkpoint-entrypoint.sh

RUN mkdir -p /var/lib/xtdb
RUN chmod +x checkpoint-entrypoint.sh

# Create xtdb user and set permissions
RUN groupadd -g 20000 xtdb && useradd -u 20000 -g 20000 -r xtdb
RUN mkdir -p /home/xtdb && chown -R xtdb:xtdb /home/xtdb
RUN chown -R xtdb:xtdb /var/lib/xtdb

# Multi-stage approach: Create checkpoint stage
FROM base as checkpoint-creator

# Run as root temporarily to create checkpoint (CRIU needs privileges)
USER root

# Create the checkpoint by running the application and checkpointing it
RUN --mount=type=tmpfs,target=/tmp \
    timeout 180s bash -c ' \
        echo "Starting XTDB to create checkpoint..." && \
        ./checkpoint-entrypoint.sh --create-checkpoint \
    ' || { \
        echo "Checkpoint creation completed or timed out (expected)"; \
        exit 0; \
    }

# Final stage: Use the checkpoint
FROM base as final

# Copy checkpoint data from the checkpoint stage
COPY --from=checkpoint-creator /var/lib/xtdb/checkpoint /var/lib/xtdb/checkpoint
RUN chown -R xtdb:xtdb /var/lib/xtdb

ENTRYPOINT ["./checkpoint-entrypoint.sh"]
CMD ["-f", "local_config.yaml"]

# Faster healthcheck since we start from checkpoint
HEALTHCHECK --start-period=5s --timeout=3s \
    CMD curl -f http://localhost:8080/healthz/alive || exit 1

EXPOSE 5432
EXPOSE 3000
EXPOSE 8080

VOLUME /var/lib/xtdb

ARG GIT_SHA
ARG XTDB_VERSION
ENV GIT_SHA=${GIT_SHA}
ENV XTDB_VERSION=${XTDB_VERSION}
ENV RESTORE_FROM_CHECKPOINT=true

LABEL org.opencontainers.image.version=${XTDB_VERSION}
LABEL org.opencontainers.image.revision=${GIT_SHA}

USER xtdb